version: '3.8'

services:
  # BCI Backend API
  bci-backend:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite+aiosqlite:///./data/bci_monitor.db
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-api-key-here}
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:8080,http://localhost:3000
    volumes:
      - ./data:/app/data
      - ./screenshots:/app/screenshots
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bci-network

  # Optional: PostgreSQL database (uncomment if you want to use PostgreSQL instead of SQLite)
  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     POSTGRES_DB: bci_monitor
  #     POSTGRES_USER: bci_user
  #     POSTGRES_PASSWORD: bci_password
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - bci-network

  # Optional: Redis for caching and session management
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - bci-network

  # Optional: Monitoring with Prometheus and Grafana
  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   networks:
  #     - bci-network

  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - bci-network

networks:
  bci-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: